#+TITLE: 线性回归

* 介绍

该目录下包含两个线性回归的应用场景。其中，目录 ~PM2.5Prediction~ 来自李宏毅 2020 Spring Machine Learning 作业 1,
是 PM2.5 的预测，这里使用线性回归对 PM2.5 进行预测。预测时，将前 9 小时数据作为输入，第 10 个小时的 PM2.5 作为预测
值。目录 ~HousePricePrediction~ 来自 [[https://www.kaggle.com/c/house-prices-advanced-regression-techniques][Kaggle]] 的波士顿房价预测项目，在 [[http://zh.gluon.ai/chapter_deep-learning-basics/kaggle-house-price.html][实战Kaggle比赛：房价预测]] 有利用 ~mxnet~ 的实
现。

对于简单线性回归，一般而言，损失函数选择为 L2 loss, 简单形式可以写为 $C=\frac{1}{2N}\sum\limits_{i=1}^N(y^i - \hat{y}^i)^2$,
这是一个典型的凸函数，可以直接求得 $C$ 取极值的解析解，具体实现可以参见 [[file:PM2.5Prediction/Python/from_scratch/linear_model.py][从零开始的线性模型]] 中 ~pseudo_inverse~ 函数，
除了直接解析求解，还可以通过梯度下降法求得极值，梯度下降法又可以细化为普通的梯度下降，即每个 Epoch 对全样本计算
损失函数的梯度并进行更新；随机梯度下降，即每个 Epoch 又可以进行一系列的 batch 的梯度更新；此外，针对学习率的设置，
在 [[file:PM2.5Prediction/Python/from_scratch/linear_model.py][从零开始的线性模型]] 同时实现了自适应梯度下降法 (~adaptive_gradient_descent~).
针对当前流行的机器学习框架和 package，在每个项目下，同时实现了基于 ~sklearn~ 和 ~mxnet~ 的线性回归模型。

此外，为了锻炼作者自身的 C++ 能力，笔者同样基于 C++ 实现了线性回归模型，不过考虑到利用 C++ 进行数据处理非常麻烦，这里
针对 C++ 的线性回归模型直接使用 Python 处理好的训练数据。

* 数据描述

** PM2.5 预测的数据

数据来自于李宏毅 2020 Spring Machine Learning 作业 1，是 PM2.5 的预测，这里使用线性回归的方式对 PM2.5 进行预测。
预测时，将前 9 个小时所有的 feature 作为输入，将第 10 个小时的 PM2.5 作为 label 进行预测。

原始数据的格式，形如：
| DATE | ADDR | FEATURE | HOUR0 | HOUR1 | ... | HOUR23 |
|------+------+---------+-------+-------+-----+--------|
| ...  | ...  | ...     | ...   | ...   | ... | ...    |

** 房价预测的数据

原始数据来自 [[https://www.kaggle.com/c/house-prices-advanced-regression-techniques][Kaggle]], 包括训练集 ~train.csv~ 和测试集 ~test.csv~, 两者的 feature 格式一致，且均包含非数值型特征
以及空值等。

| Id  | FEATURE_1 | FEATURE_2 | ... | HOUSE PRICE |
|-----+-----------+-----------+-----+-------------|
| ... | ...       | ...       | ... | ...         |

* 目录结构
 1. ~LinearRegression~ 下按照对应的场景，分为 PM2.5 预测的目录 (~PM2.5Prediction~) 和房价预测目录 (~HousePrediction~)
 2. 在对应场景目录下，文件夹 ~C++~ 包括实现了线性回归的 C++ 代码
 3. 在对应场景目录下，文件夹 ~Python~ 包括实现线性回归的 Python 代码
 4. 根据线性回归的实现方式，分为从零实现线性回归的目录 ~from_scratch~, 使用 =sklearn= 实现线性回归应用的 ~sklearn~ 以及
    使用 =mxnet= 实现线性回归应用的 ~mxnet~
 5. 线性回归的损失函数进行微分的时候，需要用到矩阵微分相关知识，在对应目录 ~Notes~ 中是对应矩阵的微分的背景知识，内容来自
    知乎大V [[https://www.zhihu.com/people/iterator-23][Iterator]] 分享的一系列文章
 6. ~Data~ 目录保存训练和测试数据

* 数据处理说明
** PM2.5 预测
1. 对原始数据导入进行初步处理
   - 对日期与小时进行合并处理
   - 对非数值类型数值进行处理
   - 数值格式转换为 pivot 透视表，方便处理
     | TIME | FEAUTE_1 | FEATURE_2 | ... | FEATURE_N |
     |------+----------+-----------+-----+-----------|
     | ...  | ...      | ...       | ... | ...       |
2. 对数据集进行分割，分为训练集和验证集
   - 按照月份，非 12 月作为训练集
   - 12 月数据作为验证集
3. 数据类型转换，将数据转换为 [feature, label] 格式的数据格式，方便处理
   #+NAME: 处理后的 feature，label 数据
   | 01_FEATURE_1 | ... | 01_FEATURE_N | 02_FEATURE_1 | ... | 02_FEATURE_N | ... | 09_FEATURE_N | 10_PM2.5(LABEL) |
   |--------------+-----+--------------+--------------+-----+--------------+-----+--------------+-----------------|
   | ...          | ... | ...          | ...          | ... | ...          | ... | ...          | ...             |
4. 归一化：支持标准归一和最大最小值归一两种方式

** 房价预测
1. 原始数据导入与初步处理
2. 数值型 feature 标准化
   - 计算训练集的均值和标准差并记录
   - 利用训练集的均值和标准差对训练集，测试集进行标准化
3. 离散 feature 进行数值化
